/**
 * Created by shaunwest on 1/16/16.
 */

import { getTilePosition, pixel2Tile, pixel2TilePoint, getTileRegion,
  setTileRegion, tileRegionIsEmpty, pixelRect2TileRect,
  fillAllTiles, fillContiguousEmptyTiles, fillContiguousTargetTiles } from '../lib/util/tile-tools.js';
import { rect, line, rectContainsPoint, flattenCoord } from  '../lib/util/geom.js';

// selection is required
export function fillTileSelection(layout, layerWidth, tileId, selection, emptyOnly = false) {
  for (let x = selection.x; x < selection.x + selection.width; x++) {
    for (let y = selection.y; y < selection.y + selection.height; y++) {
      const layerTilePosition = getTilePosition(x, y, layerWidth);
      if (!emptyOnly || typeof layout[layerTilePosition] === 'undefined') {
        layout[layerTilePosition] = tileId;
      }
    }
  }
}

export function addTiles(layout, layerWidth, startPosition, destPosition, tileId, selection) {
    const layerWidthInTiles = pixel2Tile(layerWidth);
    const positions = line(pixel2TilePoint(startPosition), pixel2TilePoint(destPosition));

    positions.forEach((position) => {
      const layoutPosition = flattenCoord(position.x, position.y, layerWidthInTiles);
      layout[layoutPosition] = tileId;
    });
}


export function copyTileSelection(layout, layerWidth, fromSelection) {
    const fromSelectionInTiles = pixelRect2TileRect(fromSelection);
    return getTileRegion(fromSelectionInTiles, layout, pixel2Tile(layerWidth));
}

export function pasteTileSelection(layout, layerWidth, tiles, toSelection) {
    const toSelectionInTiles = pixelRect2TileRect(toSelection);

    setTileRegion(tiles, toSelectionInTiles, layout, pixel2Tile(layerWidth));
}

export function moveTileSelection(layout, layerWidth, fromPosition, toSelection) {
    const fromSelection = rect(
      fromPosition.x,
      fromPosition.y,
      toSelection.width,
      toSelection.height
    );

    const tileRegion = copyTileSelection(layout, layerWidth, fromSelection);
    if (!tileRegionIsEmpty(tileRegion)) {
      fillTileSelection(layout, layerWidth, undefined, fromSelection);
      pasteTileSelection(layout, layerWidth, tileRegion, toSelection);
    }
}

// selection is required!
export function fillContiguousTiles(layout, layerWidth, position, tileId, fillTarget = false, selection = undefined) {
    const range = pixelRect2TileRect(selection); //pixelRect2TileRect(rect(0, 0, layer.get('width'), layer.get('height')));
    const tileX = pixel2Tile(position.x);
    const tileY = pixel2Tile(position.y);
    const widthInTiles = pixel2Tile(layerWidth);

    if (fillTarget) {
      fillContiguousTargetTiles(layout, tileX, tileY, tileId, range, widthInTiles);
    }
    else {
      fillContiguousEmptyTiles(layout, tileX, tileY, tileId, range, widthInTiles);
    }
  };
}
